pragma solidity ^0.6.0;

import "./IERC20.sol";
import "./SafeMath.sol";
import "./TimestampLibrary.sol";

contract CapeedTimeStampedToken is IERC20{
    
    using SafeMath for uint256;
    using BokkyPooBahsDateTimeLibrary for uint256;
    
    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;
    uint public constant SECONDS_PER_HOUR = 60 * 60;
    uint public constant SECONDS_PER_MINUTE = 60;
    int public constant OFFSET19700101 = 2440588;
    
    uint public constant DOW_MON = 1;
    uint public constant DOW_TUE = 2;
    uint public constant DOW_WED = 3;
    uint public constant DOW_THU = 4;
    uint public constant DOW_FRI = 5;
    uint public constant DOW_SAT = 6;
    uint public constant DOW_SUN = 7;

    mapping (address => uint256) private _balances;

    //mapping to hold approved allowance of token to certain address
    //       Owner               Spender    allowance
    mapping (address => mapping (address => uint256)) private _allowances;

    //the amount of tokens in existence
    uint256 private _totalSupply;

    //owner
    address public owner;
    
    string public name;
    string public symbol;
    uint8 public decimals;
    
   

    constructor () public {
        name = "WM's Second Token";
        symbol = "WMT2.0";
        decimals = 4;
        owner = msg.sender;
        
        //1 million tokens to be generated
        //1 * (10**18)  = 1;
        
        _totalSupply = 1000000 * (10 ** uint256(decimals));
        
        //transfer total supply to owner
        _balances[owner] = _totalSupply;
        
        //fire an event on transfer of tokens
        emit Transfer(address(this),owner,_totalSupply);
     }
     
     function _now() public view returns (uint timestamp) {
        timestamp = now;
    }
    
     function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {
        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);
    }
    uint public EnteredTime = _now()-1;
    uint public EnteredTimeforSepcific = _now()-1;
    address EnteredPerson;
    function setTimeToGo(uint year, uint month, uint day) public {
        
        EnteredTime = timestampFromDate(year,month,day);
    }
    
    modifier timeToGo (){
        uint currentTime;
        currentTime = _now();
        require(currentTime>EnteredTime,"Aap ka abhi time nai aaya");
        _;
    }
    
    function setpersonspecificTimebound(uint year, uint month, uint day, address person) public {
        
        EnteredTimeforSepcific = timestampFromDate(year,month,day);
        EnteredPerson = person;
    }
    
    
    modifier personSpecificTimebound (address person) {
        uint currentTime;
        currentTime = _now();
        //require(person != EnteredPerson,"Abhay bhai abhi time he");
        //require(currentTime>EnteredTimeforSepcific,"Aap ka abhi time nai aaya");
        if(person == EnteredPerson){
            if(currentTime>EnteredTimeforSepcific){_;}
        }else{_;}
        
        
    }
    
    
    
    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public timeToGo personSpecificTimebound (recipient) virtual  override returns (bool) {
        address sender = msg.sender;
        require(sender != address(0), "BCC1: transfer from the zero address");
        require(recipient != address(0), "BCC1: transfer to the zero address");
        require(_balances[sender] > amount,"BCC1: transfer amount exceeds balance");

        //decrease the balance of token sender account
        _balances[sender] = _balances[sender].sub(amount);
        
        //increase the balance of token recipient account
        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address tokenOwner, address spender) public view virtual  override returns (uint256) {
        return _allowances[tokenOwner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     * msg.sender: TokenOwner;
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override  returns (bool) {
        address tokenOwner = msg.sender;
        require(tokenOwner != address(0), "BCC1: approve from the zero address");
        require(spender != address(0), "BCC1: approve to the zero address");
        
        _allowances[tokenOwner][spender] = amount;
        
        emit Approval(tokenOwner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     * msg.sender: Spender
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address tokenOwner, address recipient, uint256 amount) public  virtual override returns (bool) {
        address spender = msg.sender;
        uint256 _allowance = _allowances[tokenOwner][spender];
        require(_allowance > amount, "BCC1: transfer amount exceeds allowance");
        
        //deducting allowance
        _allowance = _allowance.sub(amount);
        
        //--- start transfer execution -- 
        
        //owner decrease balance
        _balances[tokenOwner] =_balances[tokenOwner].sub(amount); 
        
        //transfer token to recipient;
        _balances[recipient] = _balances[recipient].add(amount);
        
        emit Transfer(tokenOwner, recipient, amount);
        //-- end transfer execution--
        
        //decrease the approval amount;
        _allowances[tokenOwner][spender] = _allowance;
        
        emit Approval(tokenOwner, spender, amount);
        
        return true;
    }
     /**
     * This function will allow owner to Mint more tokens.
     * 
     * Requirements:
     * - the caller must have Owner of Contract
     * - amount should be valid incremental value.
     */
    function mint(uint256 amount) public onlyOwner returns(uint256){
        
        uint256 TokensMinted;
        uint256 TotalSupplySoFar;
        TokensMinted = TokensMinted + amount; 
        TotalSupplySoFar = TokensMinted + _totalSupply;
        require(amount > 0,"BCC1: Invalid Amount. Minted amount should be greater than 0");
        require(TotalSupplySoFar <= 5000000, "Total supply cannot exceed 5 Million tokens");
        _balances[owner] = _balances[owner].add(amount);
        
    }
    bool public holdActive;
   function hold(bool holdinstruction)public onlyOwner {
       
       if(holdinstruction = true){
           holdActive = false;
           
       }
           else{holdActive = true;}
       
       
   }
   
   modifier isActive(){
        require(holdActive = true,"BCC1: ");
        _;
    }
   
    modifier onlyOwner(){
        require(msg.sender == owner,"BCC1: Only owner can execute this feature");
        _;
    }
}